//==============================================================================
// Assignment 2 - Test Driver Functions
//==============================================================================
/*
    File: TestDrivers.hpp
    Project: Assignment 2
    Author: Nathaniel Hoefer
    Student ID: X529U639
    Class: CS411 - Spring 2017
	Date: 3/11/2017

******************************************************************************/

#ifndef SRC_TESTDRIVERS_HPP_
#define SRC_TESTDRIVERS_HPP_

using namespace std;

// Used with tripTesting() for outputting the expected values for the test
//		Preconditions: None
//		Postconditions: Entered values are printed in the same format as the printVehicleStats()
void printExpectedStats(int testCase, double tankSize, int cityMPG, int highwayMPG, int tripTime, double fuelAddedCost,
		double fuelUsedCost, double fuelAdded, double fuelUsed, double fuelRemaining, int fuelStops)
{
	// Calculations for formatted time
	int days, hours, minutes, remainingTime;
	remainingTime = tripTime;
	days = tripTime / (24 * 60);
	remainingTime = tripTime % (24 * 60);
	hours = remainingTime / 60;
	minutes = remainingTime % 60;

	cout << "========================================================" << endl;
	cout << "                     Test Case: " << testCase 			<< endl;
	cout << "========================================================" << endl;
	cout << "                       Expected: " << endl;
	cout << "--------------------------------------------------------" << endl;
	cout << left << fixed << setprecision(2);
	cout << "Tank Size = " << setw(6) << tankSize;
	cout << "gal   City MPG = " << setw(5) << cityMPG;
	cout << "Highway MPG = " << highwayMPG << endl;;
	cout << "--------------------------------------------------------" << endl;
	cout << "Trip time(minutes) = " << setw(7) << tripTime;
	cout << "Trip time(d.hh:mm) = " << days << "." << setfill('0') << right
			<< setw(2) << hours << ":" << setw(2) << minutes << endl;
	cout << "--------------------------------------------------------" << endl;
	cout << left << setfill(' ');
	cout << "Trip cost based on fuel added = $" << fuelAddedCost << endl;
	cout << "Trip cost based on fuel used  = $" << fuelUsedCost << endl;
	cout << "--------------------------------------------------------" << endl;
	cout << "Fuel added = " << setw(8) << setprecision(4) << fuelAdded
			<< "gal    Fuel remaining = " << fuelRemaining << " gal" << endl;
	cout << "Fuel used  = " << setw(8) << fuelUsed;
	cout << "gal    Fuel stops     = " << fuelStops << endl;
	cout << "========================================================" << endl;
}

// Tests small vehicle trips that include calculations done by hand to compare results
//		generated by algorithm
//		Preconditions: None
//		Postconditions: Each test case is run and printed to the screen with actual
//			and expected results
void tripTesting()
{
	// Test Case 1 - Confirmed
	// Vehicle travels 1 trip leg containing 1 gas station, no refuel
	Vehicle v1("Actual:", "", 1, 1,
			2, 		// Tank size
			15, 	// cityMPG
			30);
	vector<TripLeg> l1;
	l1.push_back(TripLeg(20, TripLeg::CITY));			// Trip is 20 miles
	TripParameters p1(30, 60, 2.5, 20, 10, 15, 8, 15);		// Station every 15 miles
	VehicleTrip t1(v1, p1);
	t1.runTrip(l1);
	printExpectedStats(1, 2, 15, 30, 40, 0, 3.33, 0, 1.3333, .6666, 0);
	printVehicleStats(t1);

	// Test Case 2 - Confirmed
	// Vehicle travels 1 trip leg containing 1 gas station, need to refuel 1 time
	Vehicle v2("Actual:", "", 1, 1,
			1.75, 	// Tank size
			10, 	// cityMPG
			30);	// HighwayMPG
	vector<TripLeg> l2;
	l2.push_back(TripLeg(20, TripLeg::CITY));	// Trip is 20 miles
	TripParameters p2(
			30, 	// cityMPH
			60, 	// highwayMPH
			2.5, 	// Fuel Cost
			20, 	// Refuel Time
			10, 	// Restroom Time
			15, 	// Nap Time
			8, 		// Awake Time
			15);	// Station every 15 miles
	VehicleTrip t2(v2, p2);
	t2.runTrip(l2);
	printExpectedStats(
			2, 		// Test Case
			1.75, 	// Tank
			10, 	// CityMPG
			30, 	// HighwayMPG
			60, 	// Trip Time
			3.75, 	// Fuel Added Cost
			5, 		// Fuel Used Cost
			1.5, 	// Fuel Added
			2, 		// Fuel Used
			1.25, 	// Fuel Remaining
			1);		// Fuel Stops
	printVehicleStats(t2);

	// Test Case 3 - Confirmed
	// Vehicle travels 1 trip leg containing 3 gas stations, need to refuel 1 time
	Vehicle v3("Actual:", "", 1, 1,
			3.5, 	// Tank size
			10, 	// cityMPG
			30);	// HighwayMPG
	vector<TripLeg> l3;
	l3.push_back(TripLeg(50, TripLeg::CITY));	// Trip is 50 miles
	TripParameters p3(
			30, 	// cityMPH
			60, 	// highwayMPH
			2.5, 	// Fuel Cost
			20, 	// Refuel Time
			10, 	// Restroom Time
			15, 	// Nap Time
			8, 		// Awake Time
			15);	// Station every 15 miles
	VehicleTrip t3(v3, p3);
	t3.runTrip(l3);
	printExpectedStats(
			3, 		// Test Case
			3.5, 	// Tank Size
			10, 	// CityMPG
			30, 	// HighwayMPG
			120, 	// Trip Time
			7.5, 	// Fuel Added Cost
			12.5,	// Fuel Used Cost
			3,	 	// Fuel Added
			5, 		// Fuel Used
			1.5, 	// Fuel Remaining
			1);		// Fuel Stops
	printVehicleStats(t3);

	// Test Case 4 - Confirmed
	// Vehicle travels 1 trip leg containing 4 gas stations, need to refuel 2 times
	Vehicle v4("Actual:", "", 1, 1,
			3.6, 	// Tank size
			10, 	// cityMPG
			30);	// HighwayMPG
	vector<TripLeg> l4;
	l4.push_back(TripLeg(70, TripLeg::CITY));	// Trip is 70 miles
	TripParameters p4(
			30, 	// cityMPH
			60, 	// highwayMPH
			2.5, 	// Fuel Cost
			20, 	// Refuel Time
			10, 	// Restroom Time
			15, 	// Nap Time
			8, 		// Awake Time
			15);	// Station every 15 miles
	VehicleTrip t4(v4, p4);
	t4.runTrip(l4);
	printExpectedStats(
			4, 		// Test Case
			3.6, 	// Tank Size
			10, 	// CityMPG
			30, 	// HighwayMPG
			190, 	// Trip Time
			15, 	// Fuel Added Cost
			17.5,	// Fuel Used Cost
			6,	 	// Fuel Added
			7, 		// Fuel Used
			2.6, 	// Fuel Remaining
			2);		// Fuel Stops
	printVehicleStats(t4);

	// Test Case 5 - Confirmed
	// Vehicle travels city 2 trip legs containing 2 gas station each, need to refuel 2 times
	Vehicle v5("Actual:", "", 1, 1,
			4.5, 	// Tank size
			10, 	// cityMPG
			30);	// HighwayMPG
	vector<TripLeg> l5;
	l5.push_back(TripLeg(50, TripLeg::CITY));
	l5.push_back(TripLeg(50, TripLeg::CITY));	// Trip is 100 miles
	TripParameters p5(
			30, 	// cityMPH
			60, 	// highwayMPH
			2.5, 	// Fuel Cost
			20, 	// Refuel Time
			10, 	// Restroom Time
			15, 	// Nap Time
			3, 		// Awake Time
			22);	// Station every 22 miles
	VehicleTrip t5(v5, p5);
	t5.runTrip(l5);
	printExpectedStats(
			5, 		// Test Case
			4.5, 	// Tank Size
			10, 	// CityMPG
			30, 	// HighwayMPG
			265, 	// Trip Time
			22, 	// Fuel Added Cost
			25,		// Fuel Used Cost
			8.8,	// Fuel Added
			10, 	// Fuel Used
			3.3, 	// Fuel Remaining
			2);		// Fuel Stops
	printVehicleStats(t5);

	// Test Case 6 - Confirmed
	// Vehicle travels city 2 trip legs containing 2 gas station each, need to refuel 2 times
	// One Trip leg is City, the other Highway
	Vehicle v6("Actual:", "", 1, 1,
			2.4, 	// Tank size
			10, 	// cityMPG
			20);	// HighwayMPG
	vector<TripLeg> l6;
	l6.push_back(TripLeg(50, TripLeg::CITY));
	l6.push_back(TripLeg(50, TripLeg::HIGHWAY));	// Trip is 100 miles
	TripParameters p6(
			30, 	// cityMPH
			60, 	// highwayMPH
			2.5, 	// Fuel Cost
			20, 	// Refuel Time
			10, 	// Restroom Time
			15, 	// Nap Time
			2, 		// Awake Time
			22);	// Station every 22 miles
	VehicleTrip t6(v6, p6);
	t6.runTrip(l6);
	printExpectedStats(
			6, 		// Test Case
			2.4, 	// Tank Size
			10, 	// CityMPG
			20, 	// HighwayMPG
			235, 	// Trip Time
			14.5, 	// Fuel Added Cost
			18.75,		// Fuel Used Cost
			5.8,	// Fuel Added
			7.5, 	// Fuel Used
			.7, 	// Fuel Remaining
			3);		// Fuel Stops
	printVehicleStats(t6);

	// Test Case 7 - Confirmed
	// Vehicle travels city 2 trip legs containing 2 gas station each, need to refuel 2 times
	// One Trip leg is City, the other Highway
	Vehicle v7("Actual:", "", 1, 1,
			2.6, 	// Tank size
			10, 	// cityMPG
			20);	// HighwayMPG
	vector<TripLeg> l7;
	l7.push_back(TripLeg(50, TripLeg::CITY));
	l7.push_back(TripLeg(50, TripLeg::HIGHWAY));	// Trip is 100 miles
	TripParameters p7(
			30, 	// cityMPH
			60, 	// highwayMPH
			2.5, 	// Fuel Cost
			20, 	// Refuel Time
			10, 	// Restroom Time
			15, 	// Nap Time
			2, 		// Awake Time
			22);	// Station every 22 miles
	VehicleTrip t7(v7, p7);
	t7.runTrip(l7);
	printExpectedStats(
			7, 		// Test Case
			2.6, 	// Tank Size
			10, 	// CityMPG
			20, 	// HighwayMPG
			235, 	// Trip Time
			17.25, 	// Fuel Added Cost
			18.75,		// Fuel Used Cost
			6.9,	// Fuel Added
			7.5, 	// Fuel Used
			2, 	// Fuel Remaining
			3);		// Fuel Stops
	printVehicleStats(t7);

	// Test Case 8 - Confirmed
	// Vehicle travels multiple roadtypes and trip legs to test more realistic trip
	Vehicle v8("Actual:", "", 1, 1,
			1.12, 	// Tank size
			10, 	// cityMPG
			20);	// HighwayMPG
	vector<TripLeg> l8;
	l8.push_back(TripLeg(2.5, 	TripLeg::CITY));
	l8.push_back(TripLeg(3, 	TripLeg::CITY));
	l8.push_back(TripLeg(14.5, 	TripLeg::HIGHWAY));
	l8.push_back(TripLeg(20, 	TripLeg::HIGHWAY));
	l8.push_back(TripLeg(10, 	TripLeg::CITY));	// Trip is 50 miles
	TripParameters p8(
			30, 	// cityMPH
			60, 	// highwayMPH
			2.5, 	// Fuel Cost
			20, 	// Refuel Time
			10, 	// Restroom Time
			15, 	// Nap Time
			1, 		// Awake Time
			11);	// Station every 11 miles
	VehicleTrip t8(v8, p8);
	t8.runTrip(l8);
	printExpectedStats(
			8, 		// Test Case
			1.12, 	// Tank Size
			10, 	// CityMPG
			20, 	// HighwayMPG
			151, 	// Trip Time
			6.69, 	// Fuel Added Cost
			8.19,		// Fuel Used Cost
			2.675,	// Fuel Added
			3.275, 	// Fuel Used
			.52, 	// Fuel Remaining
			3);		// Fuel Stops
	printVehicleStats(t8);
}

#endif /* SRC_TESTDRIVERS_HPP_ */
